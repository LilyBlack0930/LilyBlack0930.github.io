{"pages":[{"title":"404","text":"这里应该是找不到页面时会到的地方。不过我放了点脚本。 也就是一些出现过的点击特效而已，以后可能会加别的。 鼠标点击出现爱心：1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt; 鼠标点击掉落彩虹糖：1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/candy.min.js&quot;&gt;&lt;/script&gt; 鼠标点击出现波纹：1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clickripple.js&quot;&gt;&lt;/script&gt; 可以扒源码拿 另：我找到了一个鼠标效果库：90s Cursor Effects 记得提醒我改这个页面","link":"/404.html"},{"title":"兔兔的朋友们","text":"我的信息： 名称：兔兔实验室图标：（还没有哦）链接：https://lilyblack0930.github.io/简介：兔兔的工作间 ，堆满了各种杂物 可以看见我没有独立域名（……目前还来不及做这个啦。以后会有的。 友情链接： 32w - 一栋老旧的大厦https://w32w.github.io/她们小声重复着大厦的名字，你抬头看见……“重华大厦”四个不锈钢的楷体早已陈旧不堪了，一楼的大厅上led滚动屏循环播放着“真实”二字。你乘上电梯，按下已经磨损的按钮，再一次来到了5996层。","link":"/links/index.html"},{"title":"","text":"一只赛博兔子这页还没想好怎么写。","link":"/about/index.html"},{"title":"兔兔留言板","text":"如果你想的话可以在这里留言。嗯，互动还是可以的。支持Markdown格式。 new Valine({ el: '#vcomments', appId: 'cfOFoY7wEnfxtlVz2mHao1v1-gzGzoHsz', appKey: 'm1oWOybG5CPjshRWwfzivr1R', meta: ['nick','mail','link'], placeholder: '喵，喵喵喵~', })","link":"/guestbook/index.html"}],"posts":[{"title":"(留档)【教程】json.lua第三方库的下载及使用","text":"教程原帖创建于2022年2月15日、完成于2022年2月17日，于2023年停止更新。 原帖存在大量上角标和下角标，普通Markdown语法不支持此类角标，格式可能不如原贴可爱。 使用《署名—非商业性使用—相同方式共享 4.0 协议国际版》（CC BY-NC-SA 4.0）进行授权https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode.zh-Hans 本文在格式及语言表达上参考了Hikari Sakurai的JSON 牌堆编写：从入门到进阶 推荐工具：JSON在线解析 ←真的很好用！！ 本文基于Dice!系列骰娘编写，希望可以给你的脚本编写带来帮助。在开始之前，请确认以下内容： 请确认你的骰娘是否为溯洄和Shiki开发的Dice!，方法为输入.bot后返回语句为Dice! by 溯洄 &amp; Shiki，同时请记住你的版本号（例：2.6.3beta4(603)），这可能会影响到部分功能的正常使用 本教程并非面向Lua新手，而是针对有脚本编写经验、对json有少量认知、想要利用第三方功能润色自己的产品的脚本作者。若认为自己不符合本条件，可以选择先进行一段时间的json牌堆与Lua脚本编写的练手。 请确认你有足够的耐心看完本文档，并且在操作时对自己有足够的包容心。JSON难度较低但略显复杂，我不保证自己的讲解能让所有人理解，若有不周到之处，经指出后我将对相应章节进行补充。 强调：不推荐没有任何编程基础知识就准备尝试本教程中的内容。一方面也是我还不够资格教程序基础知识，乱教只怕越教越不会…… 如果你认为已经做足心理准备，就可以接着往下看以开始进一步的脚本创作了~ 另外，如果只是单纯的想要下载json.lua，这里是文件下载链接： 下载地址略 目录 零、前言 0.0 什么是JSON？ 0.1 json.lua是什么？（附文件下载） 0.2 我应该如何使用json.lua？我能用它干什么？一、JSON的decode解码 1.0 原理介绍 1.1 JSON对象与语法 1.2 Lua表与数组 1.3 我应该怎么获取JSON中自己想要的部分？ 1.3.1 分析JSON数据 1.3.2 使用decode()进行解析 1.3.3 对解析出的内容进行调用二、JSON的encode编码 2.1 Lua table(表)和array(数组)操作 2.2 使用encode()进行编码 2.3 编写表时需要注意的逻辑 2.3.1 我应该怎么选择元素的类型？ 2.3.2 我应该如何将想要输入的元素归类？三、额外内容-关于文件I/O的写法四、常见报错信息及解决办法五、结语 零、前言Array starting at Zero ——XXX 0.0 什么是JSON？想必进行过牌堆编写，或稍微阅读过牌堆内容的用户应该对JSON这个格式不陌生毕竟后缀都是.json了谁会想不到嘛或者在Minecraft游戏里玩过命令方块指令的，可能也对此稍微有所了解。 引用： 什么是 JSON ？ JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation） JSON 是轻量级的文本数据交换格式 JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。 JSON 具有自我描述性，更易理解 在需要有格式地存取大量信息的场合下，使用JSON的存取会更为便捷。JSON的内容通常以{}包含首尾，长得像下面这样：{&quot;xxx&quot;:&quot;yyy&quot;}{&quot;xxx&quot;:[&quot;yyy&quot;,&quot;yyy&quot;]}{&quot;xxx&quot;:[{&quot;yyy&quot;:&quot;zzz&quot;,&quot;yyy&quot;:&quot;zzz&quot;,&quot;a&quot;:1},{&quot;yyy&quot;:&quot;zzz&quot;,&quot;yyy&quot;:&quot;zzz&quot;,&quot;a&quot;:0}]}此类大量套娃的文本。这样的内容就是JSON。 现在看起来可能还没那么复杂，但俗话说，*前略*，三生万物…………于是，如果是这样呢？！不想开链接的可以看下面： 内容略 (我**太长了6000多字)←第一次用字数统计看这玩意这就是利用bilibili视频获取器中调用api所得返回值的全貌，我特地挑了一个联合投稿的视频让值丰富一点。没错，一眼看上去非常复杂，这也是我想写这个教程的原因之一。这仍然是JSON，人脑已经很难迅速理解了，当然你可以使用Notepad++、Visual Studio Code等编程软件对其手动进行格式化以便于分析及获取信息，但到这种程度了手工分拣费神费力，还是老老实实用工具吧。 0.1 json.lua是什么？（附文件下载）如果需要在lua中对json格式进行编写或分析，就必须使用第三方库。一种方法是下载lua-cjson库并编译，但这种方法并非通用，门槛略高并且不符合我的初衷XD毕竟我原先也是MiraiAndroid使用者，还是华为，手机装库基本等于痴人说梦。因此这里推荐不需要编译的json.lua，文件已附于本回复末尾。 你可以将该压缩包解压出的文件直接放在骰娘根目录的DiceQQ\\plugin，或者2.6.1及以上也可以放在Diceki\\lua。某些群友反馈放在plugin无法读取，如果不放心的话可以两边都放一份 DiceQQ是指类似于Dice1234567890的文件夹不是真的叫DiceQQ的文件夹 不可以放在根目录的plugins，那边甚至不是Dice项目的范围 等等我这不是面向有经验的骰主写的教程吗 下载地址略 已有json.lua的不必重复下载。 0.2 我应该如何使用json.lua？我能用它干什么？现在你已经有了json.lua库，可以开始使用它了！确保自己的库已经安装完毕，在所需的函数中插入这样一行：j = require(&quot;json&quot;)这样就为名为j的变量赋予了json库中的编码与解码函数，当然这个变量的名字可以任意，只要自己看得懂就行。想要编码时，就使用j.encode(text)想要解码时，就使用j.decode(text)*这里的text仅为一个存储数据的变量名，在decode时应为一个字符串(string)，在encode时应为一个表(table)。在后续的相应章节将详细阐释。 “但是你说了这么多也不告诉我我为什么要学这个！” 使用JSON配合文件I/O来存取数据，比起直接存储数据，更加整齐且灵活，代码的存取遵循统一规则，无法被用户从外部攻破，并且可以辅助脚本让内容更为生动有趣……你可以通过它同时记录多个参数，同时摆脱了setUserToday只能记录数字值的桎梏，想写什么写什么。包括之前论坛中有人提出过但未实现的故事接龙，总之JSON就是很香啦。 不过，我之所以写这个，另一方面还是出于有不止一个友人需要用到这个教程。那我怎么好意思拒绝嘛~ *更正：SetUserConf可记录string值，是我记错了。在重新浏览链接内容并确认后改为setUserToday 一、JSON的decode解码无论你是用http.get(url)获取网络api、还是用文件io.read(path)读取文件内的文本，你读到的文本最原始的状态都只是一串大量套娃的普通的字符串。只有在decode后才能变成易于理解的模样。 1.0 原理介绍Shiki的 【功能介绍】Dice!2.6.1的简易http访问函数&amp;复杂图库接口的调用 中的例子： 图库接口实例并不是所有随机图库都提供url直接随机跳转，有的图库返回json来提供图片url，以接口https://www.dmoe.cc/random.php?return=json为例，返回的数据格式如下： 123456{&quot;code&quot;:&quot;200&quot;,&quot;imgurl&quot;:&quot;https:\\/\\/tva2.sinaimg.cn\\/large\\/0072Vf1pgy1foxlhv1sxmj31hc0u07i9.jpg&quot;,&quot;width&quot;:&quot;1920&quot;,&quot;height&quot;:&quot;1080&quot;} 这就需要在lua中取到json并在解析后提取”imgurl” 1234res,info=http.get(&quot;https://www.dmoe.cc/random.php?return=json&quot;)json = require &quot;cjson&quot; --调用第三方库j = json.decode(info)return &quot;[CQ:image,url=&quot;..j.imgurl..&quot;]&quot; (其实访问后会发现返回的是压缩的json，这里Shiki已经将其格式化了) 这就是一个比较简单的JSON实例，上述内容可以视为该JSON含有4个键(key)，分别名为code imgurl width height，每个key储存的值(value)都是一个字符串。逐行解释Shiki的代码，是这样的： 调用在2.6.1版本中预置的http第三方库，获取网址的返回值并储存在res和info两个变量中（前者储存网页访问成功与否的布尔值，这里不会用到。后者储存访问网页后获得的数据，即上述JSON实例） 调用cjson第三方库，将其中的代码赋值给json这个变量。本教程使用的是json.lua，所以实际调用时需要改为require(&quot;json&quot;) 对info变量进行JSON解析，将解析后的内容存储在变量j中，变量j会变为一个表(table) 返回图片，其中图片网址为表j中索引为imgurl一项所对应的字符串 其中，j在第三行解析后，会成为一个存在四个索引的表，索引名就是JSON数据中存在的四个key。以键code为例，需要调用该项值时使用j[&quot;code&quot;]和j.code皆可，推荐较为简单直观的后者，同时也能与数组进行良好的区分。 1.1 JSON对象与语法因为教程是面向对JSON略有理解的用户，所以顺序略微靠后了。 对象语法 🔗 实例：{ &quot;name&quot;:&quot;runoob&quot;, &quot;alexa&quot;:10000, &quot;site&quot;:null }JSON 对象使用在大括号{}中书写。对象可以包含多个 key/value（键/值）对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。key 和 value 中使用冒号:分割。每个 key/value 对使用逗号,分割。 你看JSON选对象的标准这么高难怪我没对象（？需要注意的是，这里的JSON对象实例，也就是一整个以{}括起的，是一个对象。对象里还能包含多个对象，每个对象里还能包含多个对象，子子孙孙无穷匮也……但我还是没对象 在JSON解析中，对象类型并非需要特别关注的点，因此这里将暂时跳过部分value中数据类型的名词解析，只讲重点的几项内容：对象：即形同实例中的内容。在对象中嵌套一个对象，表现形式为{&quot;xxx&quot;:{略}}数组：只会是一维数组。为被[]中括号括起的内容，表现形式为{&quot;xxx&quot;:[{略},{略}]}null：如果在Lua中调用了这个数据，将会返回nil。（但编码时若使用nil会连相应索引一起消失）（其余的名词解析可参考这里） JSON 语法规则 🔗 JSON 语法是 JavaScript 对象表示语法的子集。 数据在名称/值对中 数据由逗号,分隔 大括号{}保存对象 中括号[]保存数组，数组可以包含多个对象 *对象中也可以包含0个键值对、数组中也可以包含0个对象，这都是合法的。若在工具中调试，其会分别显示为(empty object)和(empty array)的形式。如果使用#xx或tonumber(xx)获取空对象或空数组的数字，将会返回0。 进行过牌堆创作的作者应该对JSON语法并不陌生。同时你也可以参考JSON牌堆教程中的2.0.1 JSON的标准格式章节的示例牌堆，其中有整洁的JSON语法示例。 1.2 Lua表与数组其实一开始写的时候没有这章节直接跳到了1.3，想着和操作相关的内容在encode部分再写也不迟，结果写完1.3.2立刻发现不得不先在这里将概念厘清，才特意插入这一章。但这里只作为与调用相关的概念性内容，对于表操作仍然会留到后面再写。呜呜呜别骂了我逻辑超差的 JSON中的对象{}与数组[]，在转换为Lua可识别的内容后会分别对应表和数组。表即为形同abc[&quot;def&quot;]、abc.def、abc[123]的字符（最后一种也可能是数组）其中，abc为表，def 123为索引。如果在调用abc.def后返回的值为xyz，则称xyz是“abc的索引为def的元素”。一个元素也可能是一个新的表或数组，因此在调用时形同ab.cd.ef.gh(表的索引的索引的索引)的元素也是存在的。表与数组相似，都需要索引才能调用，但区别在于数组只能以数字作为索引，而表可以用nil以外的一切作为索引。 Lua table(表)🔗 table 是 Lua 的一种数据结构用来帮助我们创建不同的数据类型，如：数组、字典等。Lua table 使用关联型数组，你可以用任意类型的值来作数组的索引，但这个值不能是 nil。Lua table 是不固定大小的，你可以根据自己需要进行扩容。Lua也是通过table来解决模块(module)、包(package)和对象(Object)的。 例如string.format表示使用”format”来索引table string。 Lua 数组🔗 数组，就是相同数据类型的元素按一定顺序排列的集合，可以是一维数组和多维数组。Lua 数组的索引键值可以使用整数表示，数组的大小不是固定的。 放在一起就可以看出区别了，不过由于JSON转换后的数组只会是一维数组，数组惨遭史诗级削弱，于是数组就沦为了缩水版的表。虽说如此，我个人仍然强烈建议一切以数字为索引的列表还是好好地用数组来整理。 两者在调用上存在区别： 表的调用通过aaa[&quot;bbb&quot;]或aaa.bbb均可，但数字索引不可以使用后者的形式 数组的调用只能通过aaa[123]的形式 这两种调用方法也可以混用：aaa[&quot;bbb&quot;][1][&quot;ccc&quot;] 等于 aaa[&quot;bbb&quot;][1].ccc 等于 aaa.bbb[1][&quot;ccc&quot;] 等于 aaa.bbb[1].ccc但是，aaa.bbb.1.ccc是不行的，如果你想使用一个字符串格式的数字作为索引，必须老老实实地用[&quot;1&quot;]这种形式 1.3 我应该怎么获取JSON中自己想要的部分？虽然只要几行代码就可以将JSON数据完全获取，但我还是建议拥有一定的分析能力，这有利于快速找到指定内容。 1.3.1 分析JSON数据在理解JSON语法后，就可以着手对一段JSON进行分析了。先来一段简单的。 1{&quot;text&quot;:&quot;喵&quot;} 很明显，这段JSON数据只含一个键/值(key/value)对，其中key是text，value是喵，存储格式是字符串(string)。value的几种数据类型（字符串, 数字, 对象, 数组, 布尔值, null）中，只有字符串是用&quot;&quot;英文双引号括起的，可以通过这一点辨认。 下面这段内容为我的私人脚本存储的用户留言。(脚本还在测试阶段，由于特殊设置只有我自己的QQ号可以调用，故qq和name全部相同。) 1{&quot;usagi&quot;:[{&quot;qq&quot;:&quot;1142145792&quot;,&quot;message&quot;:&quot;喵喵喵&quot;,&quot;times&quot;:1,&quot;name&quot;:&quot;兔兔零号机&quot;},{&quot;qq&quot;:&quot;1142145792&quot;,&quot;message&quot;:&quot;汪汪汪&quot;,&quot;times&quot;:1,&quot;name&quot;:&quot;兔兔零号机&quot;},{&quot;qq&quot;:&quot;1142145792&quot;,&quot;name&quot;:&quot;兔兔零号机&quot;,&quot;times&quot;:0,&quot;message&quot;:&quot;[图片]&quot;}]} 你也可以将它格式化以便于辨识： 12345678910111213141516171819202122{ &quot;usagi&quot;: [ { &quot;qq&quot;: &quot;1142145792&quot;, &quot;message&quot;: &quot;喵喵喵&quot;, &quot;times&quot;: 1, &quot;name&quot;: &quot;兔兔零号机&quot; }, { &quot;qq&quot;: &quot;1142145792&quot;, &quot;message&quot;: &quot;汪汪汪&quot;, &quot;times&quot;: 1, &quot;name&quot;: &quot;兔兔零号机&quot; }, { &quot;qq&quot;: &quot;1142145792&quot;, &quot;name&quot;: &quot;兔兔零号机&quot;, &quot;times&quot;: 0, &quot;message&quot;: &quot;[图片]&quot; } ]} 对这段内容进行分析，可以得知： 整个JSON包含一个名为usagi的键(key)，对应的值是一个[]括起的数组。 这个数组中有多个对象，每个对象都含四个key，分别名为qq message times和name。 每个对象中，除了times对应的值是数字(number)外，其余三个key对应的值都是字符串(string)。 可以发现其实实际应用中的JSON在格式上与牌堆有一定区别——通常牌堆不会在[]中再嵌套哪怕一个{}有时候调用牌堆会有{牌堆名}这样的内容，但这其实是一整个字符串中的一部分，更何况{牌堆名}这种形式本身就不符合JSON的语法规则。 1.3.2 使用decode()进行解析还记得1.2中的内容吗？来看看这段JSON数据：{&quot;ab&quot;:{&quot;cd&quot;:{&quot;ef&quot;:{&quot;gh&quot;:&quot;ij&quot;}}}}——剧透，它在decode后可以通过调用ab.cd.ef.gh获得一个内容为ij的字符串。 作为这一段的测试，你可以复制1.0或1.3.1中任意一段代码，或是在2.6.1及以上版本参照此方法使用http.get()调取会返回JSON数据的网络api链接。（网址例：1/2，部分网址存在连接不稳定等问题，请自行斟酌）更新：删除了挂掉的全部优客云api（疑似跑路）、修改了lolicon api的地址 下面会以一段同时存在空对象、空数组等内容的数据作为例子（实际调用简单JSON时很少出现这种缺少秩序的状况，而是1.3.1中提到的形式。这段内容是人为作成的，教程仅针对此特定内容，故未设置预防报错的判定） 1{&quot;usagi&quot;:[{},{&quot;name&quot;:&quot;卡戎&quot;,&quot;qq&quot;:&quot;0&quot;,&quot;text&quot;:&quot;咕呃啊啊啊啊啊啊啊啊&quot;},{&quot;name&quot;:&quot;兔兔&quot;,&quot;qq&quot;:&quot;1142145792&quot;,&quot;text&quot;:{&quot;message1&quot;:&quot;卡戎说得对&quot;,&quot;message2&quot;:&quot;我举双手赞成&quot;}},{&quot;name&quot;:&quot;不愿透露姓名的围观群众&quot;,&quot;qq&quot;:[],&quot;text&quot;:[{&quot;message&quot;:&quot;太精彩了&quot;,&quot;repeats&quot;:114},{&quot;message&quot;:&quot;听君一席话少读十年书&quot;,&quot;repeats&quot;:514}]}]} 但是，这段JSON数据是无法直接写入括号内的，因为它还不是一段字符串。但最常用的表示字符串的&quot;&quot;双引号，由于其中已经含有大量的双引号，又会失效，这时候怎么办捏——答案是lua的字符串表示方法不止一种，而另外两种''和[[]]都容易被忽略。这里只能使用后者。个人感觉[[]]最不容易出错，但很多时候出于便捷性与习惯考虑仍然会使用&quot;&quot; 1abc = [[内容太长了会看不见右边的括号，你就当我把上面那块代码都粘贴在这里了。]] 或者使用http.get()的可以参考如下： 1aaa , abc = http.get(&quot;https://api.lolicon.app/setu/v2&quot;) *第一个变量用于存储链接访问成功与否的布尔值，第二个才会存储链接返回的内容。故这里只需要使用到第二个变量。 无论你使用哪种方法，到这一步都才刚刚将JSON数据作为字符串存储进一个变量里。 下一步，你需要调用json.lua，将其中的函数“赋值”给一个参数。推荐将该参数直接命名为json，这样就不容易忘记了。 1json = require(&quot;json&quot;) require函数会遍历大量目录下的.lua和.dll文件，其中包括先前提到的DiceQQ\\plugin\\和Diceki\\lua\\，在找到指定名称的文件后，会将其中的函数都写入这个名叫json的参数中。 现在你拥有了有能力将JSON数据解码的函数，下一步是将数据解码并作为表(table)存入一个变量中。 1j = json.decode(abc) 同样地，这里的j也可以改为任何名字，只要记得住。到这一步为止，解码就算是完成了——接下来就是调用的问题。 1.3.3 对解析出的内容进行调用以上面提到的JSON数据为例： 1{&quot;usagi&quot;:[{},{&quot;name&quot;:&quot;卡戎&quot;,&quot;qq&quot;:&quot;0&quot;,&quot;text&quot;:&quot;咕呃啊啊啊啊啊啊啊啊&quot;},{&quot;name&quot;:&quot;兔兔&quot;,&quot;qq&quot;:&quot;1142145792&quot;,&quot;text&quot;:{&quot;message1&quot;:&quot;卡戎说得对&quot;,&quot;message2&quot;:&quot;我举双手赞成&quot;}},{&quot;name&quot;:&quot;不愿透露姓名的围观群众&quot;,&quot;qq&quot;:[],&quot;text&quot;:[{&quot;message&quot;:&quot;太精彩了&quot;,&quot;repeats&quot;:114},{&quot;message&quot;:&quot;听君一席话少读十年书&quot;,&quot;repeats&quot;:514}]}]} 对这段数据进行decode并存入j中，会获得如下内容（这里逐级给出）： 一个表，名叫j，其中只有一个索引，为字符串usagi 一个名为j.usagi的数组，其中含有四个表：◆ 一个表，在j.usagi中索引为1，含有0个元素◆ 一个表，在j.usagi中索引为2，含有3个元素，分别以name qq text为索引，都只含有一个字符串元素◆ 一个表，在j.usagi中索引为3，含有3个元素，分别以name qq text为索引，其中j.usagi[3].text又是一个表，含有2个索引，分别为message1和message2◆ 一个表，在j.usagi中索引为4，含有3个元素，分别以name qq text为索引，其中name索引下只含一个字符串元素、索引qq是含有0个元素的数组、text索引下是一个数组，含有2个表： ◆ j.usagi[4].text[1]含有2个元素，索引分别是message和repeats，其中message索引下是一个字符串，repeat索引下是一个数字 ◆ j.usagi[4].text[2]同上 程序已经将上述内容写入相应的变量中。如果想要让骰娘返回一个数据，必须从上至下精确地定位到该数据所在的位置。例如我想让骰娘返回其中的“卡戎”这个字符串，就必须输入： 1return j.usagi[2].name 当然你也可以加 点 细 节： 1return j.usagi[2].name ..&quot;(&quot; .. j.usagi[2].qq .. &quot;)说：&quot; .. j.usagi[2].text .. &quot;\\n&quot; .. j.usagi[3].name .. &quot;(&quot; .. j.usagi[3].qq .. &quot;)说：&quot; .. j.usagi[3].text.message1 .. &quot;\\n还说了：&quot; .. j.usagi[3].text.message2 .. &quot;\\n&quot; .. j.usagi[4].name .. &quot;说了&quot; .. j.usagi[4].text[1].repeats .. &quot;次这句话：&quot; .. j.usagi[4].text[1].message .. &quot;\\n还说了&quot; .. j.usagi[4].text[2].repeats .. &quot;次这句话：&quot; .. j.usagi[4].text[2].message 于是本章的内容，写成函数后全貌是这样的： 123456function test(msg) json = require(&quot;json&quot;) text = [[{&quot;usagi&quot;:[{},{&quot;name&quot;:&quot;卡戎&quot;,&quot;qq&quot;:&quot;0&quot;,&quot;text&quot;:&quot;咕呃啊啊啊啊啊啊啊啊&quot;},{&quot;name&quot;:&quot;兔兔&quot;,&quot;qq&quot;:&quot;1142145792&quot;,&quot;text&quot;:{&quot;message1&quot;:&quot;卡戎说得对&quot;,&quot;message2&quot;:&quot;我举双手赞成&quot;}},{&quot;name&quot;:&quot;不愿透露姓名的围观群众&quot;,&quot;qq&quot;:[],&quot;text&quot;:[{&quot;message&quot;:&quot;太精彩了&quot;,&quot;repeats&quot;:114},{&quot;message&quot;:&quot;听君一席话少读十年书&quot;,&quot;repeats&quot;:514}]}]}]] j = json.decode(text) return j.usagi[2].name ..&quot;(&quot; .. j.usagi[2].qq .. &quot;)说：&quot; .. j.usagi[2].text .. &quot;\\n&quot; .. j.usagi[3].name .. &quot;(&quot; .. j.usagi[3].qq .. &quot;)说：&quot; .. j.usagi[3].text.message1 .. &quot;\\n还说了：&quot; .. j.usagi[3].text.message2 .. &quot;\\n&quot; .. j.usagi[4].name .. &quot;说了&quot; .. j.usagi[4].text[1].repeats .. &quot;次这句话：&quot; .. j.usagi[4].text[1].message .. &quot;\\n还说了&quot; .. j.usagi[4].text[2].repeats .. &quot;次这句话：&quot; .. j.usagi[4].text[2].messageend 在添加触发词后骰娘会返回这样一个结果：（祈祷我下次卡戎boss战的时候不要被干碎)←更新：卡戎也太难打了吧 这是1.3.2、1.3.3中完成的lua脚本。如果需要进行测试，将该脚本解压加入plugin文件夹后重载骰娘并发送1.3.3测试，即可获得图中的文本。 下载地址略 二、JSON的encode编码区别于只需要字符串的decode()，encode()需要输入的是表(table)类型的数据。但Lua脚本编写的绝大多数时间不会用到数组或表，因此这里将会从表操作开始讲起。 由于数组的史诗级削弱我决定把数组当作数字变量的表一起讲。感觉这样会被打，所以还是不这么做好了。 2.1 Lua table(表)和array(数组)操作区别于可以直接赋值的变量，表和数组在操作前必须进行一步初始化的操作。如果将表和数组看作是盒子的话，这一步就是让程序知道你这里有个盒子。 假设这个表的名字为usagi： 1usagi = {} 和msg_order = {}一模一样~ 现在你就获得了一个名为usagi的空表，可以往里面写入索引和元素了。（可以理解为：JSON中的键/值对=Lua表中的索引与元素） 索引可以用字符串或数字来表达，由于JSON的特性，两者不能混用。后者在编码时会被视为数组变量，同时，空表在编码时也会被视为数组变量。 现在你可以往这个盒子里填充一些内容了。 12usagi[&quot;A&quot;] = &quot;abc&quot;usagi[&quot;B&quot;] = &quot;def&quot; 当然，内容也可以是另一个盒子……只是记得和程序说一声。 1usagi[&quot;C&quot;] = {} 如果想把索引C对应的元素做成一个数组变量，只要这样做即可。 12usagi[&quot;C&quot;][1] = &quot;123&quot;usagi[&quot;C&quot;][2] = &quot;456&quot; 同时考虑到JSON与Lua时，元素中可用的数据类型： 字符串(string)——用&quot;&quot;或[[]]括起的内容 数字(number)——就是数字，不需要被括起。如果添加了括号，它将变为字符串并失去数字的特性（数学计算等） 布尔值(boolean)——TRUE和FALSE 另一个表(table)或数组(array)——然后每个表里面又可以套一个表，每个表里面又可以…（下略） nil——***不完全***对应JSON中的null。表示一个无效值，较少用到，通常用来移除表中的值。 2.2 使用encode()进行编码在自学时本段主要参考对象为Lua利用cjson读写json与使用Lua CJSON库进行encode与decode操作完成对Json数据转化，特此表达感谢。与使用decode()时相同，首先需要调用json.lua。 1json = require(&quot;json&quot;) 然后利用自己建好的表的名称，例如我在上一篇中使用的是usagi。并将其存储在一个变量中： 1json_text = json.encode(usagi) 返回的内容是：{&quot;A&quot;:&quot;abc&quot;,&quot;B&quot;:&quot;def&quot;,&quot;C&quot;:[&quot;123&quot;,&quot;456&quot;]}等等，好像有哪里不对！！噔 噔 咚很明显，我忘记多嵌套一层了……散落在外的键像极了我破碎的心(这段不是节目效果) 是的，最外层的表的名字不会被写入，而是直接读取表的所有索引与对应元素，并写成JSON数据，并作为字符串输出。因此如果需要让它在写进JSON时也多套一层娃，正确的写法是这样的： 12345678910j= {}j[&quot;usagi&quot;] = {}j[&quot;usagi&quot;][&quot;A&quot;] = &quot;abc&quot;j[&quot;usagi&quot;][&quot;B&quot;] = &quot;def&quot;j[&quot;usagi&quot;][&quot;C&quot;] = {}j[&quot;usagi&quot;][&quot;C&quot;][1] = &quot;123&quot;j[&quot;usagi&quot;][&quot;C&quot;][2] = &quot;456&quot;json = require(&quot;json&quot;)json_text = json.encode(j)return json_text 这样返回的东西就都储存于键usagi的值里了：{&quot;usagi&quot;:{&quot;C&quot;:[&quot;123&quot;,&quot;456&quot;],&quot;B&quot;:&quot;def&quot;,&quot;A&quot;:&quot;abc&quot;}}JSON编码时会随机打乱顺序，但不影响文件读取与路径 2.3 编写表时需要注意的逻辑在这一章节中我将以一个正在进行中的脚本为例，来解释一些容易碰到的问题。这是一个我想要做的脚本，首先我需要将想要达成的要求列成一个表（略去了部分不需要存储的内容）： 想要可以收到留言。留言内容就跟在指令的后面 收到留言的同时，还想获取用户的QQ号、所在群号等信息 想要让这些留言可以在脚本执行时随机抽取其中一条并发送 由于这个指令每天限1次，肯定抽取的比发出的多，所以想让留言被抽取到一定次数后再销毁，而非阅后即焚 但是有些留言我也想永久保存，大不了通过后台改 再对需求表进行细化，确认至少需要以下这些键用来存储值： 收到的留言 QQ号、群号、用户名、群名 一整个容器，用来容纳这些内容并随机抽取 一个用来存储留言被抽取次数的变量 一个用来记录是否需要让留言永久保存的变量 2.3.1 我应该怎么选择元素的类型？首先还是列一下元素： 同时考虑到JSON与Lua时，元素中可用的数据类型：&lt;我 引 用 我 自 己&gt; 字符串(string)——用&quot;&quot;或[[]]括起的内容 数字(number)——就是数字，不需要被括起。如果添加了括号，它将变为字符串并失去数字的特性（数学计算等） 布尔值(boolean)——TRUE和FALSE 另一个表(table)或数组(array)——然后每个表里面又可以套一个表，每个表里面又可以…（下略） nil——***不完全***对应JSON中的null。表示一个无效值，较少用到，通常用来移除表中的值。 那么，很明显，留言、昵称、群名称，肯定都是字符串形式的。其次，QQ号与群号，由于不需要进行数学运算，所以也是字符串形式的。（实际上这些内容，即msg.fromQQ和msg.fromGroup，本来就是字符串）一个需要随机调用的容器？用ranint(min,max)和数组解决吧！使用数组+随机数字作为索引值，刚好符合要求。存储留言被抽取多少次的变量，因为需要进行简单的数学运算，所以用数字。对于识别留言永久保存与否，虽然可以用字符串或者数字强行匹配，不过肯定是用布尔值最方便。 ——这样就对目标变量有了一个简单的心理认知，可以进行下一步了。 *特别备注：ranint(min,max)是Dice!预置的Lua函数之一，并不普遍地存在于其他不使用Dice!框架运行的Lua脚本中。 2.3.2 我应该如何将想要输入的元素归类？有很多种归类的方法，不过我这里的话，由于已经确定了数组作为主要内容，因此大体框架肯定是这样的： 1{&quot;random_name&quot;:[{被省略的元素1},{被省略的元素2},{被省略的元素3}]} 这样如果我使用如下的方式： 12num = ranint(1,#random_name)xxx = random_name[num].xxx 就可以很方便的访问数组并调用想要的值了。其他的内容由于并没有特别的包含关系，所以一股脑地塞进元素里也是可以的。 分类通常遵循范围上从大到小的原则，无论是地理或是其他方面。如果不嫌瞎眼的，可以参考新冠疫情信息，其中有明显的省级-地级的排序。（这个api分享自タブー術的【指令脚本】以一个用http函数调用api示例脚本的做的新脚本，感谢主动分享！）（另外，此api返回信息量极大，即使是放进格式化工具也会卡顿好一会。但这种情况下更加推荐此工具，你可以在右边的树形结构图中更直观地看到以地区为主的分类规则，位置是list[n].city[n]） 同时你也可以遵循重要度从高到低的排法。例如，我想写一个新的脚本，一个用户会有很多不同的发言，我也可以将这些发言都包括在以用户QQ号为键的值内。*注意这种情况下最好给索引取类似于qq12345678的字符串，而非使用纯数字，以免出现意想不到的错误。 三、额外内容-关于文件I/O的写法很多用户在使用带有require的脚本时出现了这样的错误：（aaa是我自己做的函数库名称。它真的叫aaa……） 1234567891011121314151617181920骰娘运行lua文件G:\\Dice - 副本\\Dice3306860448\\plugin\\测试.lua失败:G:\\Dice - 副本\\Dice3306860448\\plugin\\测试.lua:3: module 'aaa' not found: no field package.preload['aaa'] no file 'G:\\Dice - 鍓湰\\Dice3306860448\\plugin\\aaa.lua' no file 'G:\\Dice - 鍓湰\\Dice3306860448\\plugin\\aaa\\init.lua' no file 'G:\\Dice - 鍓湰\\Diceki\\lua\\aaa.lua' no file 'G:\\Dice - 鍓湰\\Diceki\\lua\\aaa\\init.lua' no file 'C:\\Program Files\\Java\\jdk-17.0.1\\bin\\lua\\aaa.lua' no file 'C:\\Program Files\\Java\\jdk-17.0.1\\bin\\lua\\aaa\\init.lua' no file 'C:\\Program Files\\Java\\jdk-17.0.1\\bin\\aaa.lua' no file 'C:\\Program Files\\Java\\jdk-17.0.1\\bin\\aaa\\init.lua' no file 'C:\\Program Files\\Java\\jdk-17.0.1\\bin\\..\\share\\lua\\5.4\\aaa.lua' no file 'C:\\Program Files\\Java\\jdk-17.0.1\\bin\\..\\share\\lua\\5.4\\aaa\\init.lua' no file '.\\aaa.lua' no file '.\\aaa\\init.lua' no file 'G:\\Dice - 鍓湰\\Diceki\\lua\\aaa.dll' no file 'G:\\Dice - 鍓湰\\Diceki\\lib\\aaa.dll' no file 'C:\\Program Files\\Java\\jdk-17.0.1\\bin\\aaa.dll' no file 'C:\\Program Files\\Java\\jdk-17.0.1\\bin\\..\\lib\\lua\\5.4\\aaa.dll' no file 'C:\\Program Files\\Java\\jdk-17.0.1\\bin\\loadall.dll' no file '.\\aaa.dll' 或者是在有文件I/O的脚本中，出现这样的问题： 12骰娘调用G:\\Dice - 副本\\Dice3306860448\\plugin\\DriftingBottles.lua函数throw_bottle失败!G:\\Dice - 副本\\Dice3306860448\\plugin\\DriftingBottles.lua:103: attempt to index a nil value (global 'file') 查看用户手册可以发现这样一条内容。 lua文件的字符编码问题 🔗Windows系统一般使用GBK字符集。Dice!支持utf-8及GBK两种字符集的lua文件，在读写字符串时将自动检测utf-8编码并转换。而出现以下情况时，编码并非二者皆可： lua文件相互调用或读写其他文本文件，且字符串含有非ASCII字符时，关联文件字符集应保持一致； lua文件使用require或os等以文件名为参数的函数，且路径含有非ASCII字符时，必须使用GBK； 出现上述错误的原因就是使用了UTF-8编码的脚本而自己的文件路径含有非ASCII字符，例如中文。文件I/O也会出现同样的状况，是因为它调用的路径通常是以骰娘的getDiceDir()开始的。所以路径和编码总得妥协一个。尤其是在json.lua本身也是UTF-8编码的、并且安装新脚本也需要和它编码一致的情况下，与其将所有脚本都转码为GBK，还不如干脆将骰娘文件夹移动到纯英文路径。 文件的I/O是涉及脚本本体外的内容的一种形式。它会在指定的路径创建并读写一个文档，通常来说使用txt就足够了。文末会放出读写文件时常用的三个函数，有需要的可以直接复制进相关脚本中。 需要注意的是，在利用含JSON的脚本时，第一次读取的文件无法直接交给json.lua解码，因为文档里空空荡荡什么都没有，甚至可能连文档都没有。因此推荐读文件时添加一个类似于初始化的条件判定。可以利用read_file()读取空文件返回零长字符串的特点加以判定，若满足条件则不进行json.decode()的工作。 于是，在文件为空的情况下，如果我想实现前面提到的记录用户留言及其他信息，我必须这么做： 1234567891011121314151617181920function ttbd_write(message,user_qq) local letter = read_file(ttbd_path) -- 读取 json = require(&quot;json&quot;) if #letter==0 then -- 如果是空的 j = {} -- 初始化表“j” j.usagi = {} -- 初始化数组“j.usagi” num = 1 -- 数组索引为1 else j = json.decode(letter) -- 否则进行解码 num = #j.usagi + 1 -- 数组索引为比原有数组的数字多1 end j.usagi[num] = {} -- 初始化所在数组索引的表 j.usagi[num].message = message -- 进行正常的存表内容工作 j.usagi[num].name = getUserConf(user_qq,&quot;nick&quot;,&quot;&quot;) j.usagi[num].qq = user_qq -- 最后放弃了记录群号的想法，因为意义不大 j.usagi[num].times = 0 j.usagi[num].isPermanent = false letter_full = json.encode(j) -- 编码 overwrite_file(ttbd_path,letter_full) -- 覆写文件，由于JSON有特定格式因此无法使用追加写入end 这样在没有文件的情况下，程序就会跳过解码，直接创建指定文件夹路径和文本文档。我向骰娘添加的留言是喵喵喵，因此会写入如下内容： 1{&quot;usagi&quot;:[{&quot;qq&quot;:&quot;1142145792&quot;,&quot;name&quot;:&quot;兔兔零号机&quot;,&quot;times&quot;:0,&quot;message&quot;:&quot;喵喵喵&quot;,&quot;isPermanent&quot;:false}]} 而在第二次及以上留言时，则会正常的进行解码-添加新表-编码的过程，再覆写文件。第二次我的留言是汪汪汪，文档内容会被修改为如下： 1{&quot;usagi&quot;:[{&quot;times&quot;:1,&quot;isPermanent&quot;:false,&quot;qq&quot;:&quot;1142145792&quot;,&quot;message&quot;:&quot;喵喵喵&quot;,&quot;name&quot;:&quot;兔兔零号机&quot;},{&quot;times&quot;:0,&quot;isPermanent&quot;:false,&quot;qq&quot;:&quot;1142145792&quot;,&quot;message&quot;:&quot;汪汪汪&quot;,&quot;name&quot;:&quot;兔兔零号机&quot;}]} 其中喵喵喵这一条已经被我写好的读取代码调用了一次，因此可以看见它的times值有增加。 以下为文件读、写、覆写函数，可直接复制使用： 123456789101112131415161718192021222324-- 用于读文件，参数为文件路径function read_file(path) local text = &quot;&quot; local file = io.open(path, &quot;r&quot;) -- 打开了文件读写路径，以读取的方式 if (file ~= nil) then -- 如果文件不是空的 text = file.read(file, &quot;*a&quot;) -- 读取内容 io.close(file) -- 关闭文件 end return text -- 返回读取的内容end-- 用于写文件，参数为路径和需要写入的文本function write_file(path, text) file = io.open(path, &quot;a&quot;) -- 以追加的方式 file.write(file, text) -- 写入内容 io.close(file) -- 关闭文件end-- 用于覆写文件，参数与写文件相同function overwrite_file(path, text) file = io.open(path, &quot;w&quot;) -- 以只写的方式，会将原内容清空后写 file.write(file, text) io.close(file)end 四、常见报错信息及解决办法同时推荐查看Dice!文档的附录：lua报错信息说明。这里只列举在该教程中会出现的报错信息并加以解释。 123456骰娘运行lua文件G:\\Dice - 副本\\Dice3306860448\\plugin\\测试.lua失败:G:\\Dice - 副本\\Dice3306860448\\plugin\\测试.lua:3: module 'aaa' not found: no field package.preload['aaa'] no file 'G:\\Dice - 鍓湰\\Dice3306860448\\plugin\\aaa.lua' no file 'G:\\Dice - 鍓湰\\Dice3306860448\\plugin\\aaa\\init.lua' ... (下略) 产生原因：①UTF-8编码且存在require或loadLua的脚本，在含非ASCII字符集的路径中运行，见上一条 ②放在了读取不到的地方，例如plugin\\test\\aaa.lua。这种情况不一定会产生如上的乱码。解决办法：①将脚本全部转码或将骰娘转移至ASCII字符集的路径（可以简单理解为英文+数字+键盘上打得出的大部分英文符号） ②修改package.path，具体见-&gt;RainChain的回帖（非常感谢补充） 12骰娘调用G:\\Dice - 副本\\Dice3306860448\\plugin\\DriftingBottles.lua函数throw_bottle失败!G:\\Dice - 副本\\Dice3306860448\\plugin\\DriftingBottles.lua:103: attempt to index a nil value (global 'file') 产生原因：明明已经给file变量赋值了以getDiceDir()开头的路径，但是UTF-8编码的脚本在含非ASCII字符集的路径中运行，导致file变量未能正常写入，变成了nil解决办法：如果只存在文件读写可以考虑转码，但更推荐修改骰娘的路径 12骰娘调用G:\\Dice\\Dice3306860448\\plugin\\签到.lua函数ttbd失败!G:\\Dice\\Dice3306860448\\plugin\\json.lua:184: unexpected character '' at line 1 col 1 注：上述文本中，''之间应当有一个符号，为黑色菱形中间带一个问号。因为实际上代表空字符所以可能在复制后消失了产生原因：可能是让json.lua解码了nil或空内容解决办法：重新看一下是不是脚本中的初始化部分没做对，或者在其前面加一个条件判断使其不进行解码 12骰娘调用G:\\Dice\\Dice3306860448\\plugin\\签到.lua函数ttbd失败!G:\\Dice\\Dice3306860448\\plugin\\签到.lua:29: attempt to index a nil value (global 'j') 产生原因：这一行的内容是j.usagi = {}。试图对空变量j使用索引解决办法：声明j。在出现问题的行前面添加j = {} 五、结语我可不可以在这里碎碎念点什么，大概行吧反正是我自己的东西我爱怎么写怎么写（？总之，首先，感谢你一路看到这里。第一次写教程，也不知道写了多少字，感觉比写期末论文还长……能忍受我这么啰嗦的语言看到最后，真的辛苦你了（至此应该是将能教的都教了，如果有没涉及到的地方，希望能够获得反馈。 另外，感谢タブー術对该教程结构方面的指点，还有Text_Koaku当了一期小白鼠*（话说您完全不用论坛是吗）（笑死，地址忘了）*。 参考资料：Lua 变量 | 菜鸟教程Lua 字符串 | 菜鸟教程Lua 数组 | 菜鸟教程Lua table(表) | 菜鸟教程Lua 文件I/O | 菜鸟教程JSON 教程 | 菜鸟教程JSON 语法 | 菜鸟教程JSON 对象 | 菜鸟教程JSON 数组 | 菜鸟教程Lua利用cjson读写json - KAME - 博客园使用Lua CJSON库进行encode与decode操作完成对Json数据转化 - echo111333 - 博客园在线工具：JSON在线解析 | 菜鸟工具Lua在线工具 | 菜鸟工具 ——碎碎念呢？——想了想还是不写了，就祝大家虎年大吉吧。","link":"/2022/05/04/(%E7%95%99%E6%A1%A3)%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91json.lua%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"title":"CQ码、图床、图片地址关系梳理","text":"CQ码&amp;图床&amp;图片地址关系梳理、怎样对Dice!系骰娘的漂流瓶进行图片打击、以及怎样利用图床整更多花活这是一篇教程，起因是有群友想给朋友的骰娘维斯特拉投入图片，但无法理解图床等专有名词以及它们之间的关系。 话说好像给维斯特拉的海里丢图片也是我先开始的，我谢罪…… 会分为四章，前三章主要讲图床和图片地址的关系，最后再讲CQ码。 其一、图床简述床，灵魂的归宿。 就如河床是河流的载体，海床是海洋的根基。图床一般是存储图片的服务器。 你的床上没有你。你还有很多任务没有完成，不可以休息哦。 我并不怎么在意专门的图床，因此知道的网页不多。sm.ms、imgur.com是两个常见的国外图床。 如果想要搜索更多图床，直接百度即可。我个人对其没有专门需求所以不进行列举。逮哪个用哪个 社交平台（微博、QQ等）其实也拥有自己的图床，但通常不会公开给其他平台引用。骰娘是一个例外，经测试，它确实可以引用上述两个社交平台的图片。但经测试，github.io不可对上述两个社交平台进行引用。 其二、图片地址其实是个很简单的东西，但往往被大多数人所忽略…… 获取图片地址的方法： 前提是你在用浏览器访问网页，而不是打开了什么花里胡哨的APP 电脑鼠标右键/手机长按你想获取图片地址的图片，直到出现菜单栏 选择复制图片地址；如果没有的话，就选择在新标签页中打开图片，然后对打开的网页的网址进行复制 这样你就获得图片地址了 我将其归咎于现代互联网发展使得浏览器地位逐年下降…… 言归正传。既然知道如何获取图片地址，就可以进行更多操作。 例如在个人博客中插入图片![](括号里输入你的图片网址) （在Typora中，这样的图片如果可以访问的话将直接显示其预览图） 或者往漂流瓶里扔一些图片，也就是我这次教程受众的终极目标…… 但，如果有人给维斯特拉扔了不合适的图片，我作为教程作者也难逃其咎…… 其三、我该怎么利用图床？其实本来没想到要写这一块，但是看见群友用了但没完全用的表现……写吧，都可以写。 由于骰娘需要的是图片地址，而不是图床所在的地址，而在我先前几次口头指导时表述不清，曾经导致误扔图床地址的情况发生。 以我刚搜到的imgse.com为例，在上传单张图片后，它会将你引向一个新的网址。比如上面的猫咪上传后的网址是https://imgse.com/i/zKIzt0。 这不是图片链接。它是一个功能齐全的网页，甚至还有广告位。 滑到网页底部，可以看见与这张图片相关的一些信息—— 其中，图片链接实际上是这个网页的链接，而图片URL链接才是这张图片的图片地址。 如果觉得这样讲起来太复杂听不懂，或者使用的图床和这里的存在区别，那么直接按前一章的方法获取地址就可以了。结果和图片URL链接获得的地址是一样的。 可以看到，在网页贴图代码、论坛贴图代码和Markdown代码中，都存在一个超链接，如果直接复制使用了这段代码，点击这张图片后就会直接引导向图床网页。不信可以点点看上面那张图片。图床运营商赚广告费的小手段捏 其四、别扯那么多了，我只是想给漂流瓶丢点图片！首先，经年初个人在MiraiAndroid上的测试，骰娘对漂流瓶中的图片只起中转作用，不会造成比收发文字消息更大程度的流量负担。在当时缓存图片格式CQ码尚未被禁、漂流瓶大量吞吐图片的情况下，MiraiAndroid的月流量也不超过50MB。 之前也有讲到，微博和QQ平台的图床是可以直接被Dice!骰娘（限mirai框架，go-cqhttp等框架未测试）引用的。因此，可以直接从微博、QQ空间等触手可及的地方上传图片，按第二章的做法获取地址。 手搓CQ码并向骰娘投入图片的方法：[CQ:image,url=你所复制的图片地址] 使用CQ码的骰娘会将上述代码自行消化为图片后输出。若对自己的操作不放心，可以通过.r [CQ码]的方式确认，无误后再投入漂流瓶 注意 图片最大不能超过30MB PNG格式不会被压缩，JPG可能不会二次压缩，GIF非动图转成PNG GIF动图原样发送(总帧数最大300张, 超过无法发出, 无论循不循环) 再次强调，请勿向维斯特拉或任何装载漂流瓶插件的骰娘投入违规内容！！ EX、直接利用bot和插件，通过正则表达式快速获取图片地址这一步要求你得先有个自己的骰娘，或其他bot，只要能够读取CQ码或mirai码即可。 针对自己的bot，发送图片并写入文件以进行测试，获得一块生肉 mirai码：[mirai:image:{02B1F584-ECA5-FFB0-08DD-B97800C64704}.jpg] CQ码（mirai框架下Dice!获取到的）：[CQ:image,file={02B1F584-ECA5-FFB0-08DD-B97800C64704}.jpg.mnimg] CQ码（go-cqhttp框架）：[CQ:image,file=02b1f584eca5ffb008ddb97800c64704.image,url=https://c2cpicdw.qpic.cn/offpic_new/1142145792//1142145792-3053331080-02B1F584ECA5FFB008DDB97800C64704/0?term=3&amp;amp;is_origin=0] 无论是哪种方法，都可以获得02B1F584-ECA5-FFB0-08DD-B97800C64704这一段（第三种没有横线） 前二者模式为8位-4位-4位-4位-12位共32位大写字母数字组合，实际上，捕获{}中的部分再剔除掉横线就可以了。 QQ对这些图片的存储地址的模式为：https://c2cpicdw.qpic.cn/offpic_new/QQ号//QQ号-0-32位字母数字组合/0?term=3&amp;is_origin=0，将QQ号部分替换为发送者QQ号或任意数字（10000以上），将32位字母数字组合部分替换为上面捕获到的字符串（大小写无所谓），即获得图片链接。 Dice!中使用了无限匹配回复作成的简易监听，注意设置触发限制并确保对象群无其他人，否则这个脚本真的会导致毁灭性的后果。本脚本作成于Mod扩展模块完善前，现可通过扩展模块代替回复脚本。 关键词：(.*) 触发性质：Reply 匹配模式：Regex 触发限制：grp_id:群号 回复形式：Lua 回复： 123456if getUserConf(getDiceQQ(),&quot;DoRecord&quot;,0)==1 thenfilePath = getDiceDir()..&quot;\\\\plugin\\\\masterRecord\\\\record.txt&quot;file = io.open(filePath, &quot;a&quot;)file.write(file, msg.fromMsg)io.close(file)end 另附用于存储与修正变量DoRecord的函数，写入.lua文件并放入插件文件夹启用 1234567891011121314msg_order={}function DoRecord(msg) if msg.fromQQ~=&quot;骰主QQ自行更改&quot; then return &quot;&quot; end setUserConf(getDiceQQ(),&quot;DoRecord&quot;,1) return &quot;已开启记录模式。\\n使用.reply show (.*)查看目前应用记录模式的群聊！&quot;endmsg_order[&quot;开启记录模式&quot;]=&quot;DoRecord&quot;function NoRecord(msg) if msg.fromQQ~=&quot;骰主QQ自行更改&quot; then return &quot;&quot; end setUserConf(getDiceQQ(),&quot;DoRecord&quot;,0) return &quot;已关闭记录模式。\\n使用.reply show (.*)查看目前应用记录模式的群聊！&quot;endmsg_order[&quot;关闭记录模式&quot;]=&quot;NoRecord&quot; Q1、为什么我不能在CQ码中投入非图片地址的链接？会发生什么？反正骰娘是不会炸的。 因为CQ码中的图片格式严格要求目标URL获得的是图片，所以非图片的链接会直接消失——同时在后台出现十几行血红的报错，可能伤及骰主的心脏。 Q2、为什么只讲了CQ码的图片部分？全公开就乱套了，你看美国大家都可以持枪是不是就很乱。 自由建立在规则的基础上，而在几乎无规则制约的互联网和骰娘平台，我选择用知识封锁来制约用户。","link":"/2022/11/20/CQ%E7%A0%81%E3%80%81%E5%9B%BE%E5%BA%8A%E3%80%81%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80%E5%85%B3%E7%B3%BB%E6%A2%B3%E7%90%86/"},{"title":"20220930","text":"HAPPY BIRTHDAY TO ME!!!","link":"/2022/09/30/20220930/"},{"title":"First Thing","text":"于是我建了这个站，然后下了个Typora不过我对于要写点什么还没有任何头绪只是想建并且感觉自己确实可以做到，回过神来已经建好了在部署中发现了一些问题，实际上只是代码改错了导致的那么，既然已经看得到这篇文章了——你好，世界！","link":"/2022/05/03/First%20Thing/"},{"title":"NoneBot搭建经验总结","text":"看见发布的这条，就说明我正在逐渐退出Dice!了。因为以后还得在服务器上这么做一次……所以赶紧总结一下经验。 前置-环境配置Python刚好这个学期学的是Python所以配过了。略过不讲。Python版本必须≥3.7.3。重点是设置环境变量，在安装Python的时候必须勾选，不然后续会很麻烦。 支持.py文件的编辑器（Visual Studio Code）本来学期初下载了PyCharm，不过既然视频教程里用的是VS Code，也就下载一个吧。并且实际使用下来，VS Code在这方面比PyCharm略微好用一些。在微软商店（听说较快）或官方网站（这个链接打开后直接下载，很慢）下载VS Code安装包，自行选择安装环境。打开VS Code，选择左列小方块图标，搜索并安装以下扩展： 1234Chinese (Simplified) (简体中文) Language Pack for Visual Studio CodeJupyterPythonPylance 然后重启VS Code。 高兴的也可以重启电脑，随便你 nb-cli脚手架其余安装NoneBot2的方式见手册。 按下win键并直接输入cmd，或者用其他什么办法打开命令提示符，输入： 1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple nb-cli 这里用的是清华镜像源，下载速度比直接下载不知道快到哪里去了如有报错，见教程视频。 打开任意文件夹，在左上角文件找到打开Windows PowerShell，输入nb，没有飘红，就表示脚手架安装成功。届时在Show Logo档按回车或者直接关闭PowerShell都可以。如果出现以下红字，请尝试卸载并调整环境变量，再重新安装nb-cli。 nb : 无法将“nb”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。 创建机器人使用go-cqhttp这么做可以是可以，但对比下来略为繁琐，如果先前有搭建QQ机器人的经验（单纯使用Dice!或其他一键部署的不算），可以选择跳过。因为我个人已经不使用此方法，故这里只放出视频地址，而不进行说明。 后来的补充：因为某些原因，我重新启用了这种做法。详见文章：下载新版本的go-cqhttp然后给NoneBot搬个家吧 在NoneBot中使用nonebot-plugin-gocqhttp创建新项目 打开PowerShell，输入nb create，回车发送。 在询问Project Name时，输入一个自己喜欢的名字，再次回车。 使用键盘“↑”和“↓”键，选中2) In a &quot;src&quot; folder，回车提交。 询问Which builtin plugin(s) would you like to use?，选中echo并按空格勾选，然后提交。 询问Which adapter(s) would you like to use?，仅选中OneBot V11。 安装插件在PowerShell中，输入pip install nonebot-plugin-gocqhttp，等待安装完成。 调整项目环境 （可选）用记事本或者VS Code打开项目文件夹中的.env文件，将ENVIRONMENT=dev改为ENVIRONMENT=prod，会少一些debug提示。 打开.env.dev（如果在第一步有更改，则打开.env.prod），进行修改。 1234567HOST=127.0.0.1PORT=51234 # 一个10000-60000之间随机的数字SUPERUSERS=[&quot;1142145792&quot;, &quot;3259553986&quot;] # 超级用户NICKNAME=[&quot;awesome&quot;, &quot;bot&quot;] # 其实没什么用COMMAND_START=[&quot;/&quot;,&quot;&quot;] # 命令开头，可以自己改掉，不推荐设置空&quot;&quot;，建议删了。我这里设置了&quot;.&quot;和&quot;。&quot;LOG_LEVEL=DEBUG # 如果是.dev会有这两行FASTAPI_RELOAD=true # 不需要动，.prod是没有的 不过对于小开发者来说或许不怎么会出现这种现象 打开bot.py，在nonebot.load_builtin_plugins(&quot;echo&quot;)行的下方新增一行，写入nonebot.load_plugin('nonebot_plugin_gocqhttp')。若运行出现错误，可将nonebot.load_from_toml一行注释掉。 （可选）若使用的是VS Code且电脑存在多个Python环境（例如我就还有个conda），按CTRL+SHIFT+P并输入interpreter，找到选择解释器，将Python解释器更改为正确的路径。 按CTRL+F5，进行以非调试模式运行。 当最终出现Uvicorn running on http:127.0.0.1:XXXXX表示运行成功。 添加账号 打开终端提供的链接（通常为http:127.0.0.1:XXXXX/go-cqhttp），查看WebUI。 选择添加账号，输入QQ号，也可以调整登录设备类型。接下来会使用二维码登录，所以不需要输入QQ密码。 手机登录机器人QQ，然后电脑选中机器人，点击启动，在右方进程日志上将状态切换为实时，出现二维码后进行扫码。若无法识别二维码，可选择使用左侧显示登录二维码。 登录完成后，网页可以关闭，无需一直开启。可以对机器人私聊发送[命令开头]echo [内容]，例如/echo 123，来确认机器人是否正常启用。机器人会重复一遍你的话。 安装插件第三方插件可以在插件商店选择自己想要的插件，并复制其指纹（直接复制安装命令存在bug，可以不用）在机器人根目录打开PowerShell，输入nb plugin install 插件名……然后就报错了。 12ERROR: Could not install packages due to an OSError: [WinError 5] 拒绝访问。: 'c:\\\\programdata\\\\anaconda3\\\\lib\\\\site-packages\\\\imageio-2.9.0.dist-info\\\\direct_url.json'Consider using the `--user` option or check the permissions. 原因是拒绝访问，而实际上nb并没有--user这条命令，所以这里使用了pip install 插件名 --user，成功安装。然后与之前一样，在bot.py添加一行nonebot.load_plugin('插件名')，重新运行程序，即可启用插件。 自己写的插件前置在bot.py中加入nonebot.load_plugins('src/plugins') 方法1在根目录\\src\\plugins文件夹内创建新的.py文件，名字为插件名 方法2在根目录\\src\\plugins文件夹内创建新的文件夹，内含__init__.py等文件","link":"/2022/05/08/NoneBot%E6%90%AD%E5%BB%BA%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"},{"title":"TODO","text":"好多东西 Dice!相关： 鸽笼HTTP前端更新（按更新说明） NB2相关： roll、log、draw 鱼塘 其他插件搬运 新绘头像： twitter github 跑路或改名： QQ github 重新设计： 看板娘的形象","link":"/2022/09/07/TODO/"},{"title":"bot功能列表","text":"Dice!/海豹模块 rd 一般掷骰（.r） 复合表达式掷骰（.rXdX、加减乘除等） 表达式与掷骰理由分离 多轮掷骰（.r[次数]#[表达式]） 其他规则掷骰（rh、rb/p等） rh rb/rp 忽略过程的掷骰（.rs） nn自定义全局昵称或单群昵称 bot开关（优先进行） 角色卡录入、读取、ra/rc（30%、30%、10%（需要对掷骰逻辑进一步分析）） log模块 coc角色卡生成/dnd角色卡生成（dnd？真不熟） help模块 ob模块 draw抽卡模块（纯编程耗时18小时！目前做得最久的项目！） 对于各种错误参数的回复 牌堆权重 牌堆嵌套调用 掷骰模块和sample模块 暗抽 .draw _XXX .drawh XXX 额外做了个热重置牌堆的模块，增删改牌堆不需要重启bot了 赵骰模块 sn实时更改群名片（知识盲区，搁置） 青果骰模块（仅参考了小青果酱） 拍一拍掷骰（我兔某人包一锅饺子就是为了这口醋！） 自己拍自己的特殊回复 拍指定人的特殊回复（目前是我和小恶魔） 其他自定义模块 人格自选切换（类伪春菜、个人区分存储。暂无可选人格。灵感来源于32w的项目） 群老婆（做着玩的） 群空调（做着玩的，一种对群变量存储的初步尝试） 接入网易云的点歌模块（好像商店有？不确定，再看看） 对旧Dice!插件的搬运或重写 兔兔病栋签到 兔兔病栋送礼、留言 兔兔鱼塘（重制版）（10%） 其他兔兔病栋系脚本（保密） bilibili链接分析（可能考虑调用现有库） 漂流瓶（传 统 艺 能） VA-11 Hall-A调酒 狗屁不通文章生成器（原本的就是从py抄的，这回啊，是又抄回来了） 从其他地方弄来的插件 黄黑站标题图片生成 homonumber/臭数字（114514论证器） 指定群友发病（嘿嘿嘿XXX我的XXX……） Bing AI聊天（感谢日向麻麻！） 本来打算做的最后还是不做了的插件 方舟抽卡（API不稳定、图片生成质量一般）","link":"/2022/11/18/bot%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8/"},{"title":"下载新版本的go-cqhttp然后给NoneBot搬个家吧","text":"这篇文章是对先前的文章中跳过的内容的补充说明 下载并配置go-cqhttp下载前往→Github上的go-cqhttp发布页 在Release中找到最新的一项并下载对应版本 1234windows 64位：go-cqhttp_windows_amd64.exewindows 32位：go-cqhttp_windows_386.exeLinux 64位：go-cqhttp_linux_amd64.tar.gzLinux arm（树莓派）：go-cqhttp_linux_arm64.tar.gz 我用的是windows64位，剩下的管它是什么东西反正这段是我抄来的 后面的也是按windows的来 配置将下载好的文件放入一个名为gocq文件夹中，双击运行，它会释出安全启动脚本（go-cqhttp.bat） 将上述下载好的.exe文件改名为go-cqhttp.exe 如果没有正确释出脚本的话，请在记事本中输入以下内容，保存退出后将文件重命名为go-cqhttp.bat： 12%Created by go-cqhttp. DO NOT EDIT ME!%start cmd /K &quot;go-cqhttp.exe&quot; 然后双击go-cqhttp.bat，提示如下： 123456789未找到配置文件，正在为您生成配置文件中！请选择你需要的通信方式:&gt; 0: HTTP通信&gt; 1: 云函数服务&gt; 2: 正向 Websocket 通信&gt; 3: 反向 Websocket 通信&gt; 4: pprof 性能分析服务器请输入你需要的编号(0-9)，可输入多个，同一编号也可输入多个(如: 233)您的选择是: 这里使用反向 Websocket 通信，即输入3后回车，不要输入其他任何东西 提示：默认配置文件已生成，请修改 config.yml 后重新启动! 关闭界面，看见生成的config.yml，右键使用任意编辑器编辑此文件 打开后将account下的uin更改为机器人的QQ号，password更改为机器人的密码（因为rc5后默认的设备不支持扫码登录），将servers下的universal删掉并改为ws://127.0.0.1:端口号/onebot/v11/ws，端口号建议范围是10000-60000的随机数，不推荐使用过于平常的数字（有可能被其他软件占用端口，导致端口冲突） 填写完成后保存关闭，再次运行go-cqhttp.bat，见启动成功即可 前往上级文件夹（和gocq同级），输入nb create，开始正常的nonebot创建流程 反向通信在创建好的nonebot中使用VS Code打开bot.py，使用非调试模式运行，再打开gocq 进行一段处理后可以看见bot.py所在的命令行提示Bot xxxxxx connected和connection open 打开与bot的聊天框，输入.echo xxx（注意这里的.只是示例，实际为你设定的命令开头中的任意一个），看见bot回复，说明连接成功 接下来关闭上述正在运行的程序，将之前项目的插件放入，即直接完成nonebot的搬家工作 不要更改bot.py中的任何内容 也就是说其实做好上述工作之后也不需要更改什么 补充说明：如果是更改现有项目的话删除nonebot.load_plugin('nonebot_plugin_gocqhttp')就好了，大概。","link":"/2023/03/30/%E4%B8%8B%E8%BD%BD%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84go-cqhttp%E7%84%B6%E5%90%8E%E7%BB%99NoneBot%E6%90%AC%E4%B8%AA%E5%AE%B6%E5%90%A7/"},{"title":"兔兔鱼塘改造计划","text":"🐟🐟🐟🐟🐟 兔兔鱼塘算是我早期做的骰娘脚本之一，参考了世界和惠惠的好感脚本东拼西凑而成的。 最初，对于摸鱼量的变量甚至沿用了好感的“favor”。后来很快改成了“fish”同时被迫重置了所有人的摸鱼数，虽然对初期而言这些小数据几乎算得上无关紧要罢了。不过从这件事还是能明显地看出来我那时稚嫩得不得了的Lua水准。 搬家途中，这个脚本的搬运是不可或缺的。同时进行一次改造，就当练手吧。 原设定兔兔鱼塘最初的灵感来自于惠惠的“摸惠惠”好感系统，实际改自好感送礼脚本。在后来重置后删除了不必要的部分，并再一次修改了变量名。笑死大家的鱼塘又没了 至于为什么宁可做个摸鱼计数也不做好感计数呢，关于这点我有自己的考量。此外，风见花理未来也不会添加好感度系统。 指令为“我要摸鱼！”，每次发送指令后返回固定的回复。 你抽出一条大鱼，用娴熟的手法抚摸起来。今日已摸■条累计摸鱼■■条 其中第二行为单人当日摸鱼数量，第三行为全服累计摸鱼数量。两条内容怎么牛头不对马嘴的…… 每天可使用3次该指令，每次使用均为固定回复，到达上限后返回特殊回复。 摸鱼也要有个限度啊▲▲！ 另外还有指令“查看鱼塘”，同样为送礼差分，根据不同的数量显示不同的回复，仅此而已。 什么嘛，▲▲的鱼塘里这不是完全没有鱼嘛▲▲已经摸了■条鱼，要加油哦▲▲已经摸了■■条鱼，稍具规模了呢▲▲，你已经摸了■■条了，你是波塞冬吗？▲▲，我不知你抱着何种心态……总之你已经摸了■■■条鱼了，永无止境的摸鱼啊…… 反正甚至没人达到第四行的水平（180条） 最后，存在扣除自己的鱼的指令“放生鱼鱼”，其实本来准备与兔兔病栋系列的C币系统联动，但最后也没有做。 你将一条鱼放回了鱼塘，它很感激你并用尾巴抽了你一大嘴巴子 以及无鱼可放时的差分 ▲▲你已经没有鱼可以放生了！ 就这些指令，没了。 可以看见实际上该脚本完全沾不上“有趣”的边…… 因此我决定对其进行资本主义改造。 计划——我，很不幸地，一度沉迷于各种合成类小游戏…… 私以为，这类重复性高的收集游戏，如果要能让人玩下去的话，一套带图、有简单的正反馈、有一定长度、甚至埋藏彩蛋的体系是必不可少的。 作图实在麻烦，并且一被风控最容易被屏蔽的就是图片，所以还是选择了emoji系列。主要还是作图麻烦。 在简单找了几个网站（ifreesite → emojiXD → unicode.org）后，将emoji锁定在几个即使电脑浏览器也能显示的水产上，并将其按等级从高到低排序。 🐳 🐋 🦈 🐬 🐙 🦑 🐡 🐠 🐟 同时在查找时也注意收集其他emoji，以下是未被应用的水产： 🐚 🦀 🦞 🦐 🦪🐢 （一切以windows浏览器可见为准，因此海豹🦭、珊瑚🪸以及新出的水母🪼未收入其列） 虽然可能没有用，但是先收起来总没错的。 其实初设定时并未计入鱿鱼（第六个），且章鱼原本排在第三，仅次于两条鲸鱼。但是刚好赶上斯普拉遁3发售，鱿鱼和章鱼不排一起怎么行？！ 笑死，章鱼被拉下神坛。 1 - 基础框架首先需要做的是设定它的合成次数。 由于有9种不同的鱼，因此如果是N合1的话，实际合成到最高级所需要的小鱼数量是N^(9-1)条。 预想设定为QQ等级式，即4条小鱼合成一条高级鱼。若是，则需要总共65536条小鱼——按原设定的每天获取3条，则需要21845.3天（近60年）——才能收集到第一条满级鱼。 我想将完整流程缩减到一年以内，故必须摒弃原本“一次摸一条”的思想，并且引入随机奖励的机制是必不可少的。 2 - 调整获取速度纠结了几天4合1究竟合不合适的问题，然后发现其实正常合成游戏的2合1思路（256条）刚好符合预期速度……那就2合1吧。 但奖励还是不会少的，只是会更多的集中在彩蛋方面，尽可能地控制速度增长。 到了这步，让游戏持续时间尽量拉长的可行性已经降到很低了，因此不再将其作为主要考量目标。同时，比起逆向运算如何设置获取速度，不如列出数个方案，再调整到自己需要的数值，在计算上更为简便。 最终方案 每日可摸鱼次数：1次 每次摸鱼获取数量：1条 暴击率：10% 暴击获取数：2~10条 此外，还有： 参考一款我玩了很久(2013年7月入坑)的网页游戏(Dragon Cave)的节日徽章系统，跟进一套节日彩蛋奖章。 参考32w的骰娘“维斯特拉”的七点半打卡系统，每日07:30后首个打卡者必定暴击，同时计数一次特别奖章。00:00至07:30期间不可打卡。 3 - 设计显示算法之前提到了，我的设计参考了QQ等级，也就是说我希望拥有类似于QQ等级的显示方式。 不过由于我的算法是2合1，所以不会像QQ等级一样出现多个元素重复的情况（👑☀️🌙🌙🌙⭐⭐⭐）。 做起来其实也蛮简单的，首先假定我们有一个数字…… 1fish = 123 由于这个数字可能超出上限（虽然要在很久以后），所以先将它除至512以下…… 12marine = fish // 512pond = fish % 512 写一个转换pond部分的函数 12345678910def fish_convert(num): marine = num // 512 # 可能超限 pond = num % 512 emojis = ['🐳', '🐋', '🦈', '🐬', '🐙', '🦑', '🐡', '🐠', '🐟'] # 定义emoji list binary = bin(pond)[2:].zfill(9) # 转换成二进制，去掉'0b'的开头，补足位数 emoji_list = [emojis[i] if digit == '1' else '' for i, digit in enumerate(binary)] ret = ''.join(emoji_list) if marine &gt; 0: ret = '🌊*' + str(marine) + ' + ' + ret return ret 尝试print一下这个函数 123print(fish_convert(0))print(fish_convert(123))print(fish_convert(114514)) 得到的结果是： 123🦈🐬🐙🦑🐠🐟🌊*223 + 🐳🦈🐙🐠 感觉+太土了，又纠结了一下emoji的“➕”号，最后还是改成了换行。 这样的话对于远超上限的用户，获得的结果会像这样： 12🌊*223🐳🦈🐙🐠 嗯，这还好看点。 未完待续","link":"/2022/08/19/%E5%85%94%E5%85%94%E9%B1%BC%E5%A1%98%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/"},{"title":"从白嫖中科院服务器到挂上NoneBot","text":"///本项目已废弃///话说我电脑乱挪位置导致出现一些奇奇怪怪的小bug……不过再过半年也就不用这台电脑了，所以无所谓了。 感谢FairyLand·苍穹的教程，不过我仍然会重新叙述一遍这里的要点 其一、免费获取一个存储空间1. 注册一个科技云通行证前往中国科技云通行证，按要求填写信息。 身份证号与单位不是必填项…… 2. 开通存储卷前往中国科技云，在用户持久化存储空间中点击“去使用”。 苍穹说按步骤来但实际没有进行什么操作，等待一段时间后刷新网页，确认存储卷状态为“已挂载”即可。 3. 开通VSCode容器点击创建新服务→Code Server，或直接访问此链接。 开通并设置初始密码，这个密码会在每次登入时用到。 其二、安装环境1. 设置VSCode插件因为存储卷容量很小，所以仅设置一个python。搜索Pylance可以更快找到这个插件…… 同时，安装这个插件意味着自动帮你安装了Python3。 2. 获取pip还不会…… 其三、从Git拉取你的NoneBot项目1. 将本机项目上传至Git其实本来想用Github的但是访问超时了，所以退而求其次打开了注册后从未使用过的Gitee…… 1) 创建远程仓库登录Gitee，创建一个新的仓库，记住分支名字 2) 使用本机VSCode连接远程仓库点击橙色的克隆/下载复制远程仓库的https地址，通常为https://gitee.com/用户名/仓库名.git 在服务器界面左边第三个按钮（枝状图按钮），点击三个点→远程/Remote→添加远程存储库/Add Remote… 粘贴地址后回车，然后要求填写远程仓库名称，填写origin，回车 3) 使用服务器拉取远程仓库同样地添加存储库，填写远程仓库名称，填写origin，回车 刷新服务器，从Get Started界面点击Clone Git Repository...，粘贴地址，回车，然后按步骤操作","link":"/2022/11/22/%E4%BB%8E%E7%99%BD%E5%AB%96%E4%B8%AD%E7%A7%91%E9%99%A2%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%B0%E6%8C%82%E4%B8%8ANoneBot/"},{"title":"关于留言板如何建设","text":"这里用的是Valine的留言功能。我一开始尝试了Livere来必利，但注册繁琐，搞了一会仍然卡在第一步，就放弃了。 注册LeanCloud这个留言板的数据是存储在LeanCloud上的。 注册完成并验证邮箱后，选择创建应用。 完成应用创建后，点击左下角设置→应用凭证，找到自己的AppID和AppKey。 新建页面这个应该不会太陌生了。 1hexo new page guestbook 插入HTML片段打开 source\\guestbook 文件夹中的 index.md，在进行简单的页面介绍之后，写入以下HTML片段，记得将appId和appKey改成之前界面里找到的字符串： 1234567891011&lt;script src='//unpkg.com/valine/dist/Valine.min.js'&gt;&lt;/script&gt;&lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;&lt;script&gt; new Valine({ el: '#vcomments', appId: '你的AppId', appKey: '你的AppKey' })&lt;/script&gt; 其余自定义配置请参考官方文档","link":"/2022/05/06/%E5%85%B3%E4%BA%8E%E7%95%99%E8%A8%80%E6%9D%BF%E5%A6%82%E4%BD%95%E5%BB%BA%E8%AE%BE/"},{"title":"博客建设经验总结","text":"好像没什么要总结的……并且可以发现，虽然我会Markdown，但我懒得用，尤其是标题之类的。 确实，以前用Markdown的场合基本都是在论坛答疑上，正式发布的内容少之甚少。不过还是开始吧。 搭建首先是我使用的网站，是这个，从B站找到的免费个人博客的搭建。另外也参考了一些官方教程等，不过主要用的还是这个。还是挺详细的。 也可以直接看视频： 需要注意的是，最后部署时修改的_config.yml中的一部分： 1234deploy: type: git repository: git@github.com:your_name/your_name.github.io.git branch: main 一方面是repository行的后面，.com后的那个冒号不能有空格……手癖导致这里多了个空格，后续部署大批报错。另外，branch使用main而不是master，更方便。 自定义按上述过程建完之后也只是默认样式，并且是纯英文的。按教程，下一步应当是使用这个网站进行自定义界面的搭建……但它真的只是教你建新的页面！总之我们跳过这个。我也还没学呢。 浏览想要获取炫酷的主题，正确做法是去https://hexo.io/themes/来找到一个入你法眼的、贰刺猿的好看的主题样式。例如我用的是Anatolo，虽然看中的是它的六边形图标，但后续还是自己去免费图标网站找了个新的，再自己用PS调了下颜色。 安装获取主题：第一步是clone项目，做法是使用git clone [主题网址].git themes/[主题名]或者直接下载主题zip包解压至themes目录下，并重命名为主题名。例如，Anatolo的安装就是git clone https://gitee.com/Lhcfl/hexo-theme-anatolo.git themes/Anatolo安装依赖：通常各个主题会指示需要哪些依赖。按步骤安装即可。应用主题：检查所选主题是否存在_config.yml，如果不存在则需要按要求修改其他文件。然后修改hexo根目录下的_config.yml，将theme: 改为主题名。 关于如何发布新内容一个办法是直接在source\\_post文件夹下新建.md文件，不过这样的文件会缺少信息。正确做法是输入hexo new post 内容名，然后在程序创建的内容名.md中进行修改。不过我觉得正常人都会这么做吧……如何正确打tag：tags:[TAG1, TAG2] 关于如何在网页中插入js脚本首先去网上找到脚本……或者自己写一个，如果你很行的话。这里以鼠标点击爱心为例。这个脚本还是很常见的，去网上随便就能找到，或者打开审查元素直接从我这里 偷 下载也可以。然后打开themes\\主题名\\source\\js，将找到的.js脚本拖入在.md中任意位置插入这样一行： 1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt; 就可以获得效果了。 那么差不多就是这些。我是兔兔，下次再见。","link":"/2022/05/04/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"},{"title":"戳戳戳戳戳戳戳戳戳戳一戳","text":"应他人要求，解释一下我的戳一戳代码。 首先，天下一大抄冷静，把刀放下。 戳一戳其实是我在NoneBot上写的第一个插件。此时我不熟悉框架，甚至连基本的插件知识都是一知半解。 因此，最快捷的获得我想要的功能的办法，就是抄——把不懂的部分抄来，剩下的交给键盘它自己会写。 找到可供参考的现有插件在NoneBot插件商店中，有大量公开的脚本，可供参考。其中映入眼帘的第一个插件就是这个（代码经过作者多次重写，可以在这里找到我当时下载的版本）： 服务器状态查看 t:server 通过戳一戳获取服务器状态 它原本用来实现什么功能的我们不用管（其实稍微试过一下），既然它是用戳一戳来触发的，那直接把它的触发段拿出来就是了。 你，让我抄抄！翻看源码可以发现，对应接收戳一戳事件的代码是： 12async def _group_poke(event: PokeNotifyEvent) -&gt; bool: return event.is_tome() 会返回一个布尔值，检查事件目标是否指向自己。反正我看了这个之后觉得腾讯做的这个功能挺离谱的，感觉很不可靠的样子…… 然后再用一个on_notice响应器，接收通知类消息中符合上述条件的消息： 1group_poke = on_notice(_group_poke, priority=10, block=True) 然后再挂一个handle。不过我这里有改动过，所以就不放出了。 然后稍微加一点细节太麻烦了所以我们忽略导入模块的部分…… 总之，在获得了这些内容之后，就可以着手编写自己的插件了。 123456@group_poke.handle()async def poke_roll(bot: Bot, event: Event): ''' 一些各种处理 ''' await group_poke.finish('[&lt;某人&gt;]掷骰:\\nD100=&lt;掷骰结果&gt;') 那么首先是对掷骰结果的获取。这个很简单。 1dice_result = random.choice(range(100)) + 1 或者其他的办法也行，其他的范围也行，只要把D100改成别的数字。 然后处理如何获取某人。 1user_info = await bot.get_stranger_info(user_id=int(user_id)) # 获取用户信息，返回dict 这里返回的dict中，user_info[&quot;nickname&quot;]就是对象的QQ名称。 12345@group_poke.handle()async def poke_roll(bot: Bot, event: Event): dice_result = random.choice(range(100)) + 1 user_info = await bot.get_stranger_info(user_id=int(user_id)) # 获取用户信息，返回dict await group_poke.finish(f'#[{user_info[&quot;nickname&quot;]}]掷骰:\\nD100={dice_result}') 嗯，写完了。就是这么简单。 当然后续还添加了关于用户.nn后添加昵称以及获取昵称的相关代码以实现昵称的自定义化，不过这都是后话，并且有一万种方法实现这个功能。 接着再加亿点细节既然event是由PokeNotifyEvent赋值的，那它是不是可以有其他功能呢？ 当然可以！ 况且你看青果酱可以戳、小青果酱也可以戳，并且戳了小青果酱之后回复的并不是小青果酱而是青果酱，所以就算不可以我也会试图去实现这个功能的 打开nonebot库，并找到它所在的文件，翻看一下源码： 1234567891011121314151617class PokeNotifyEvent(NotifyEvent): &quot;&quot;&quot;戳一戳提醒事件&quot;&quot;&quot; __event__ = &quot;notice.notify.poke&quot; sub_type: Literal[&quot;poke&quot;] target_id: int group_id: Optional[int] = None @overrides(Event) def is_tome(self) -&gt; bool: return self.target_id == self.self_id @overrides(NotifyEvent) def get_session_id(self) -&gt; str: if not self.group_id: return str(self.user_id) return super().get_session_id() 这里的target_id就是被戳的对象的QQ号，它的格式是int。 于是新建一个函数，用来查找戳的对象是否为我： 12345678910async def _master_poke(event: PokeNotifyEvent) -&gt; bool: return event.target_id == 11111111 # QQ号master_poke = on_notice(_master_poke, priority=9, block=False)@master_poke.handle()async def masterPoke(bot: Bot, event: Event): rndlist = ['一些回复词'] res = rndlist[random.choice(range(len(rndlist)))] await master_poke.finish(res) *我也不知道为什么我要写这么长的抽取，可能是脑子抽了吧 随便再套个数组抽取（当时还没做抽卡），完工。 此外，青果酱还有一个功能：当一个用户戳了自己时，也会有特殊回复，那就再写一个。特别注意的是，它的优先度需要凌驾于其他戳一戳事件之上。 这里的user_id在PokeNotifyEvent的更上一级类中。 12345678910async def _self_poke(event: PokeNotifyEvent) -&gt; bool: return event.user_id == event.target_idself_poke = on_notice(_self_poke,priority=8,block=True)@self_poke.handle()async def selfPoke(bot: Bot, event: Event): user_id = event.get_user_id() user_info = await bot.get_stranger_info(user_id=int(user_id)) await self_poke.finish(f'你在干什么啊[{user_info[&quot;nickname&quot;]}]！') 差不多就是这样。 哦对了，await bot.get_stranger_info也是我抄来的。 总不可能有人会误以为我指甲盖大小的大脑能理解异步处理和await吧？","link":"/2023/04/10/%E6%88%B3%E6%88%B3%E6%88%B3%E6%88%B3%E6%88%B3%E6%88%B3%E6%88%B3%E6%88%B3%E6%88%B3%E6%88%B3%E4%B8%80%E6%88%B3/"}],"tags":[{"name":"Dice","slug":"Dice","link":"/tags/Dice/"},{"name":"教程","slug":"教程","link":"/tags/%E6%95%99%E7%A8%8B/"},{"name":"NoneBot","slug":"NoneBot","link":"/tags/NoneBot/"},{"name":"灵感","slug":"灵感","link":"/tags/%E7%81%B5%E6%84%9F/"},{"name":"施工中","slug":"施工中","link":"/tags/%E6%96%BD%E5%B7%A5%E4%B8%AD/"},{"name":"服务器","slug":"服务器","link":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"入门","slug":"入门","link":"/tags/%E5%85%A5%E9%97%A8/"}],"categories":[]}